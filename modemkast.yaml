substitutions:
  time_timezone: "Europe/Brussels"
  version: "2.0"
  device_description: Temperatuurlogger en ventilator controller Modemkast
  friendly_name:  Modemkast

esphome:
  name: "modemkast"
  platform: esp8266
  board: nodemcuv2
  on_boot:
    then:
        - climate.pid.set_control_parameters:
            id: regelaar
            kp: !lambda
                return id(g_kp);
            ki: !lambda
                return id(g_ki);
            kd: !lambda
                return id(g_kd);
        - climate.control:
            id: regelaar
            mode: "COOL"
        - climate.pid.reset_integral_term: regelaar  

logger:
  level: DEBUG
  logs: 
    climate: ERROR
    dht: ERROR
    sensor: ERROR
    number: ERROR
    binary_sensor: ERROR

api:
ota:
captive_portal:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  #fast_connect: True
  manual_ip:
    #static_ip: 192.168.0.xx
    gateway: 192.168.0.1
    subnet: 255.255.255.0
  ap:
    ssid: "Esphome-Modemkast"
    password: "changeme"

web_server:
  port: 80
  auth:
    username: espfan
    password: changeme

globals:
  - id: g_kp
    type: float
    restore_value: yes
    initial_value: '0.0'
  - id: g_ki
    type: float
    restore_value: yes
    initial_value: '0.0'
  - id: g_kd
    type: float
    restore_value: yes
    initial_value: '0.0'

number:
  - platform: template
    icon: mdi:fan
    name: "Ventilator Snelheid (Manueel)"
    id: vent_speed
    optimistic: true
    min_value: 0
    max_value: 1
    step: 0.01
    on_value:
      - lambda: |-
          if (id(fan_speeder).state == 1 ) {
            pwm_out->set_min_power(id(vent_speed).state);
          } 

text_sensor:
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address

binary_sensor:
  - platform: template
    name: "Manual Fan Speed"
    id: "man_fan"
    internal: true

sensor:
  - platform: wifi_signal
    name: $friendly_name WiFi Strength
    update_interval: 60s
  - platform: pid
    name: "P-Factor"
    id: kp
    type: KP
    unit_of_measurement: ""
    accuracy_decimals: 4
  - platform: pid
    name: "I-Factor"
    id: ki
    type: KI
    unit_of_measurement: ""
    accuracy_decimals: 4
  - platform: pid
    name: "D-Factor"
    id: kd
    type: KD
    unit_of_measurement: ""
    accuracy_decimals: 4
  - platform: pid
    id: vent_pwm
    name: "Ventilator Snelheid (PWM Spanning)"
    climate_id: regelaar
    icon: mdi:fan
    type: COOL
  - platform: homeassistant
    name: "P Coefficient"
    entity_id: input_number.p_coefficient
    id: p_coefficient
  - platform: homeassistant
    name: "I Coefficient"
    entity_id: input_number.i_coefficient
    id: i_coefficient
  - platform: homeassistant
    name: "D Coefficient"
    entity_id: input_number.d_coefficient
    id: d_coefficient

  - platform: dht
    pin: GPIO3
    model: DHT11
    temperature:
      name: "Temperatuur"
      id: internal_temp
      accuracy_decimals: 2
      filters:
        - exponential_moving_average:  
            alpha: 0.1
            send_every: 1
        - lambda: |-
            float MAX_DIFFERENCE = 2.0;
            static float last_value_t = NAN;
            static int count_missed_t = 0;
            if (count_missed_t == 3) last_value_t = x;
            if (isnan(last_value_t) || std::abs(x - last_value_t) < MAX_DIFFERENCE) {
              count_missed_t = 0;
              return last_value_t = x;
            } else {
              count_missed_t += 1;
              ESP_LOGW("main", "Missed Temperature Data %d", count_missed_t);
              return last_value_t;
            }
    humidity:
      name: "Vochtigheid"
      id: internal_vochtigheid
      filters:
        - lambda: |-
            float MAX_DIFFERENCE = 2.0;
            static float last_value_t = NAN;
            static int count_missed_t = 0;
            if (count_missed_t == 3) last_value_t = x;
            if (isnan(last_value_t) || std::abs(x - last_value_t) < MAX_DIFFERENCE) {
              count_missed_t = 0;
              return last_value_t = x;
            } else {
              count_missed_t += 1;
              ESP_LOGW("main", "Missed Temperature Data %d", count_missed_t);
              return last_value_t;
            }
    update_interval: 2s
    
  - platform: dht
    pin: GPIO14
    model: DHT11
    temperature:
      name: "Temperatuur extern"
      id: external_temperature
      accuracy_decimals: 2
      filters:
        - exponential_moving_average:  
            alpha: 0.1
            send_every: 1
        - lambda: |-
            float MAX_DIFFERENCE = 2.0;
            static float last_value_t = NAN;
            static int count_missed_t = 0;
            if (count_missed_t == 3) last_value_t = x;
            if (isnan(last_value_t) || std::abs(x - last_value_t) < MAX_DIFFERENCE) {
              count_missed_t = 0;
              return last_value_t = x;
            } else {
              count_missed_t += 1;
              ESP_LOGW("main", "Missed Temperature Data %d", count_missed_t);
              return last_value_t;
            }
    humidity:
      name: "Vochtigheid extern"
      id: external_humidity
      filters:
        - lambda: |-
            float MAX_DIFFERENCE = 2.0;
            static float last_value_t = NAN;
            static int count_missed_t = 0;
            if (count_missed_t == 3) last_value_t = x;
            if (isnan(last_value_t) || std::abs(x - last_value_t) < MAX_DIFFERENCE) {
              count_missed_t = 0;
              return last_value_t = x;
            } else {
              count_missed_t += 1;
              ESP_LOGW("main", "Missed Temperature Data %d", count_missed_t);
              return last_value_t;
            }
    update_interval: 2s

output:
  - platform: esp8266_pwm
    pin: GPIO5
    id: pwm_out
    frequency: 25000 Hz
    min_power: 0%
    max_power: 100%

climate:
  - platform: pid
    name: "Modemkast Thermostaat"
    id: regelaar
    sensor: internal_temp
    default_target_temperature: 25°C
    cool_output: pwm_out
    visual:
      min_temperature: 18 °C
      max_temperature: 50 °C
    control_parameters:
      kp: 0.15
      ki: 0.004
      kd: 0.5

switch:
  - platform: template
    name: "Ventilator Snelheid (Manueel)"
    id: fan_speeder
    icon: mdi:fan
    lambda: |-
      if (id(man_fan).state) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - lambda: |-
          id(man_fan).publish_state(true);
          pwm_out->set_min_power(id(vent_speed).state);
    turn_off_action:
      - lambda: |-
          id(man_fan).publish_state(false);
          pwm_out->set_min_power(0);      
          pwm_out->set_max_power(1);
          
  - platform: restart
    name: "Restart"
    
  - platform: template
    icon: mdi:upload
    name: "PID Instellen"
    turn_on_action:
      - climate.pid.set_control_parameters:
          id: regelaar
          kp: !lambda
              return id(p_coefficient).state;
          ki: !lambda
              return id(i_coefficient).state;
          kd: !lambda
              return id(d_coefficient).state;
              
  - platform: template
    icon: mdi:download
    name: "PID Waarden laden"
    turn_on_action:
      - homeassistant.service:
          service: input_number.set_value
          data:
            entity_id: input_number.p_coefficient
            value: !lambda return id(kp).state;
      - homeassistant.service:
          service: input_number.set_value
          data:
            entity_id: input_number.i_coefficient
            value: !lambda return id(ki).state;
      - homeassistant.service:
          service: input_number.set_value
          data:
            entity_id: input_number.d_coefficient
            value: !lambda return id(kd).state;
            
  - platform: template
    icon: mdi:math-integral-box
    name: "Reset Integraal"
    turn_on_action:
      - climate.pid.reset_integral_term: regelaar
      
  - platform: template
    icon: mdi:content-save
    name: "PID Instellingen opslaan op ESP"
    turn_on_action:
      - climate.pid.set_control_parameters:
          id: regelaar
          kp: !lambda
              return id(p_coefficient).state;
          ki: !lambda
              return id(i_coefficient).state;
          kd: !lambda
              return id(d_coefficient).state;
      - globals.set:
          id: g_kp
          value:  !lambda
                  return id(p_coefficient).state;
      - globals.set:
          id: g_ki
          value:  !lambda
                  return id(i_coefficient).state;
      - globals.set:
          id: g_kd
          value:  !lambda
                  return id(d_coefficient).state;

